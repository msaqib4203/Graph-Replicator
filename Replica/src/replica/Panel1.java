/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package replica;

import java.awt.BasicStroke;
import java.awt.Color;
import static java.awt.Color.BLACK;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;
import static replica.Panel2.duplicateNodes;

/**
 *
 * @author MSaqib
 */
public class Panel1 extends javax.swing.JPanel {

    /**
     * Creates new form Panel
     */
    
    public static ArrayList<Node> originalNodes = new ArrayList<>();
    public static ArrayList<Edge> originalEdges = new ArrayList<>();
    public static int NAME = 1;
    public Color nodeColor = new Color(108,203,235);
    public Color nodeBorder = new Color(4,141,186);
    public Color HighLight = new Color(222,245,73);
    public Node NodeAnime;
    public int XX;
    public int YY;
    public boolean inDrag;
    
    public Panel1() {
        initComponents();
    }

    Timer animate = new Timer(5,new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent ae) {
           if(NodeAnime.radius < 40){
               NodeAnime.radius+=4;
           }
        else
        animate.stop();
           repaint();
        }
    });
    @Override
    protected void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs);
        Graphics2D g = (Graphics2D)grphcs;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        
        g.setColor(new Color(106,4,76));
        g.setStroke(new BasicStroke(3));
        for(Edge e:originalEdges){
            g.drawLine(e.x1, e.y1, e.x2, e.y2);
        }
        for(Node n:originalNodes){
            if(n.selected)
                g.setColor(Color.RED);
            else
                g.setColor(nodeColor);
            g.fillOval(n.x-n.radius/2, n.y-n.radius/2, n.radius,n.radius);
            if(n.radius == 40){
                g.setColor(nodeBorder);
                g.drawOval(n.x-20, n.y-20, 40, 40);
                g.setFont(new Font("SansSerif",Font.PLAIN,24));
                g.setColor(BLACK);
                if(n.name<10)
                    g.drawString(Integer.toString(n.name), n.x-6, n.y+8);
                else
                    g.drawString(Integer.toString(n.name), n.x-15, n.y+8);
            }
        }
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        for(Node n:originalNodes){
            if(x==n.x && y==n.y)
                return;
            if(n.x - 40 < x && x < n.x + 40 && n.y - 40 <y && y < n.y + 40)
                return;
        }
        ContainerFrame.jComboBox1.addItem(Integer.toString(NAME));
        Node temp = new Node(evt.getX(),evt.getY(),NAME++);
        originalNodes.add(temp);
        NodeAnime = temp;
        ContainerFrame.jComboBox1.setEnabled(true);
        animate.start();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        XX = evt.getX();
        YY = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        try{
            if(evt.getX() == XX)
                return;
            int X = evt.getX();
            int Y = evt.getY();
            if(inDrag){
                inDrag = false;
                Edge atLast = originalEdges.get(originalEdges.size()-1);
                for(Node n:originalNodes){
                    if(X < n.x+20 && X > n.x-20 && Y > n.y-20 && Y < n.y+20 && n.name!=atLast.src.name){
                        atLast.x2 = X;
                        atLast.y2 = Y;
                        atLast.dstn = n;
                        for(Edge e:originalEdges){
                            if((e.src == atLast.dstn) && (e.dstn == atLast.src))
                                originalEdges.remove(atLast);
                        }
                        atLast.src.connectedTo.add(atLast.dstn);
                        atLast.dstn.connectedTo.add(atLast.src);
                        repaint();
                        return;
                    }
                }
                originalEdges.remove(atLast);
                repaint();
            }
        }
        catch(Exception e){}
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        try{  
            int X = evt.getX();
            int Y = evt.getY();
        
            if(!inDrag){
                inDrag = true;
                for(Node n:originalNodes){    
                    if(X < n.x+20 && X > n.x-20 && Y > n.y-20 && Y < n.y+20){
                        Edge e = new Edge(n,X,Y);
                        originalEdges.add(e);
                        break;
                    }
                }
            }
            if(inDrag){
                originalEdges.get(originalEdges.size()-1).x2 = X;
                originalEdges.get(originalEdges.size()-1).y2 = Y;
            }
            repaint();
        }catch(IndexOutOfBoundsException ioe){}
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        
        boolean Legal = false;
        outer:  for(Node n:originalNodes){
            if(n.x-20 < x && x < n.x+20 && n.y-20 < y && y < n.y+20 ){
                n.selected = true;
                for(DuplicateNode dn:Panel2.duplicateNodes){
                    if(dn.id == n.name){
                        dn.selected = true;
                        Legal = true;
                        break outer;
                    }
                }
            }
        }
        if(!Legal){
            for(DuplicateNode dn: duplicateNodes)
                dn.selected = false;
            for(Node n: Panel1.originalNodes)
                n.selected = false;
        }
        
        ContainerFrame.highLight();
    }//GEN-LAST:event_formMouseMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
